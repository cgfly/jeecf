<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>controller</name>
	<filePath>src/main/java/${packageName}</filePath>
	<fileName>DictEnumUtils.java</fileName>
	<content><![CDATA[

package ${packageName};

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.jeecm.common.mapper.JsonMapper;

/**
 * ${functionName}
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
public class DictEnumUtils {

	public static int getCode(String type, String name,int defaultCode) {
	    switch(type.toUpperCase()) {
		   <#list sysDictGOList as s>
		   case "${s.type?upper_case}":
			 return ${s.type?cap_first}.getCode(name);
		   </#list>
		   default:
			 return defaultCode;
		}
	}

	public static String getName(String type, int code,String defaultName) {
		switch(type.toUpperCase()) {
		   <#list sysDictGOList as s>
		   case "${s.type?upper_case}":
			 return ${s.type?cap_first}.getName(code);
		   </#list>
		   default:
			 return defaultName;
		}
	}

	public static String getJsonString(String type) {
		switch(type.toUpperCase()) {
		   <#list sysDictGOList as s>
		   case "${s.type?upper_case}":
			 return ${s.type?cap_first}.toJsonString();
		   </#list>
		   default:
			 return null;
		}
	}
	
    <#list sysDictGOList as s>
    <#if s.description??>// ${s.description}</#if>
    public static enum ${s.type?cap_first} {
        <#list s.sysDictList as c>
        ${c.label?upper_case}(${c.value},"${c.name}"),
        </#list>
        ;
        
        private final int code;
		private final String name;

		public int getCode() {
			return code;
		}

		public String getName() {
			return name;
		}

		private ${s.type?cap_first}(int code, String name) {
			this.code = code;
			this.name = name;
		}

		public static Integer getCode(String name) {
			for (${s.type?cap_first} e : ${s.type?cap_first}.values()) {
				if (e.getName().equals(name) ) {
					return e.getCode();
				}
			}
			return null;
		}
		
		public static String getName(int code) {
			for (${s.type?cap_first} e :  ${s.type?cap_first}.values()) {
				if (e.getCode() == code ) {
					return e.getName();
				}
			}
			return null;
		}
		
		public static String toJsonString() {
			List<Map<String,Object>> List = new ArrayList<>();
	        for (${s.type?cap_first} e : ${s.type?cap_first}.values()) {
	            Map<String,Object> map = new HashMap<String,Object>();
	            map.put("code", e.getCode());
	            map.put("name", e.getName());
	            List.add(map);
	        }
	        return JsonMapper.toJson(List);
		}
    }
    </#list>
}]]>
	</content>
</template>